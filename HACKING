 Diction_php HACKING
=====================

 Hacking
=========

 File Orgainisation
--------------------

Sentence.php contains most of the original sentence.c code.
Style.php contains most of the original style.c code.

DictionBase.php contains support code for language pack implementation.

Lang.php contains base language pack code.

LangEN.php contains English specific code.

 Processing flowchart
----------------------

   Block of text
         |
         V
 Sentence::process()
         |
         V
 Separate Sentences
  |  |  |  |  |  |   each sentence is passed, in turn, to
  V  V  V  V  V  V
 Sentence::processSentence()

Style.php overrides Sentence.php:processSentence() and performs some simple
style checks on each sentence passed. The diction code will also override
processSentence().

Paragraphs are signalled by passing an empty string to
Sentence::processSentence().

Eventually, there will be another step where the block of text is split into
paragraphs, which are then processed.

 Language Packs
----------------

Any code or data that is specific to a particular language is to be stored in a
class called Lang?? (where the ?? is the language code, e.g. EN for English) in
a file of the same name. These classes must extend the Lang base class and
define all the parameters and methods that aren't specified in the Lang base
class.

Language packs will eventually be provided for German ("DE") and Dutch ("NL")
using the text present in the original diction software.

 Test Cases
------------

The test cases are to test the final results from all *completed*,
non-obviously-correct code within the library against either known good results
(see the sentence tests) or the original functionality of Style / Diction.

The sentence test case, due to fixing some major bugs in the original sentence
parser, checks the functionality of the code against a set file containing a
number of sentences to coverage test the code. (Note that complete code coverage
has not yet been proven)

The style test case produces a report detailing all the values gleaned from both
the original C implementation and new PHP implementation of the style algorithm.
These reports are then compared for differences. Of note is the output of the
"lengths" variable in the reports: The C code produces a contiguous set of
sentence lengths, including zero values, while the PHP implementation only
produces the actual values. The test case's output omits the zero values from
the original implementation's code so that the reports can be accurately
compared.

The diction test case will probably work in a similar manner to the style test
case.

 Known Differences Between the PHP Implementation and C Implementation
-----------------------------------------------------------------------

In the sentence parser, the PHP implementation:
 * Handles the end of the string differently.
 * Doesn't require capital letters at the start of sentences.
 * Handles ellipses differently.
 * Handles abbreviations. (The C implementation has the code, but it doesn't
   work.)

In the style implementation, the PHP implementation:
 * Counts syllables differently.

Please note that this list is incomplete.

 Coding Style
--------------

I use a modified version of the Linux Kernel style.

Essentially, opening braces are *never* on their own line, and statements that
follow closing braces and are related to that block are on the same line as the
closing brace.

E.g.

Correct:
if( $this->param ) {
	$this->do_stuff($param);
	$this->param = false;
} else {
	$this->do_other_stuff();
	$this->count++;
}

If a block only has a single statement inside it, omit the braces.

Spaces around two argument operators are mandatory. Spaces inside brackets for
control statements and functions are as in the example.

Statements are on single lines where possible, even if this would wrap, unless
it would drastically impact readability.

8 column tabs, not 8 spaces, and minimal trailing whitespace.

 Commit Rules
--------------

When committing:
 * Try to ensure (either by fixing the test case or the code) that the test
   cases pass. (Note that I don't always follow this rule, especially given that
   I'm still fixing major bugs in the code.)
 * Try to have one idea per patch, e.g. a commit that applies three distinctly
   different cleanups is unwelcome - as is using three commits to fix the same
   bug in three different places. 
